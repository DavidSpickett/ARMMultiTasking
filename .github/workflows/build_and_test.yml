name: build_and_test

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_platform: ["ARM", "THUMB", "AARCH64"]

    steps:
    - uses: actions/checkout@v2

    - name: Apt Installs
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-pip ccache expect qemu-system-arm
        echo "CCACHE_DIR=$(pwd)/.ccache" >> $GITHUB_ENV

    - if: matrix.build_platform == 'AARCH64'
      name: Export Toolchain URL
      run: |
        echo "TOOLCHAIN_URL=https://developer.arm.com/-/media/Files/downloads/gnu-a/9.2-2019.12/binrel/gcc-arm-9.2-2019.12-x86_64-aarch64-none-elf.tar.xz" >> $GITHUB_ENV

    - if: matrix.build_platform == 'ARM' || matrix.build_platform == 'THUMB'
      name: Export Toolchain URL
      run: |
        echo "TOOLCHAIN_URL=https://developer.arm.com/-/media/Files/downloads/gnu-rm/9-2020q2/gcc-arm-none-eabi-9-2020-q2-update-x86_64-linux.tar.bz2" >> $GITHUB_ENV

    - name: Download Toolchain
      run: |
        mkdir toolchain
        wget --quiet $TOOLCHAIN_URL
        tar xaf $(basename $TOOLCHAIN_URL) -C toolchain --strip-components=1
        echo "PATH=$(pwd)/toolchain/bin/:$PATH" >> $GITHUB_ENV

    - name: Install Lit
      run: |
        # Required for distlib, used by virtualenv
        pip3 install setuptools wheel
        # A venv is the best way to be sure where 'lit' is located after install
        pip3 install virtualenv
        python3 -m virtualenv testenv
        source testenv/bin/activate
        pip3 install lit

    # [[[cog
    # import cog
    # for opt_level in ["0", "s", "3"]:
    #   for sanitizers in ["OFF", "ON"]:
    #     for lto in ["OFF", "ON"]:
    #       # LTO makes no difference at O0
    #       if (opt_level == "0") and (lto == "ON"):
    #         continue
    #       inputs = (opt_level, sanitizers, lto)
    #       cog.outl("- name: Build_O{}_SANITIZERS_{}_LTO_{}".format(*inputs))
    #       cog.outl("  run: |")
    #       cog.outl("    mkdir build_O{}_SANITIZERS_{}_LTO_{}".format(*inputs))
    #       cog.outl("    cd build_O{}_SANITIZERS_{}_LTO_{}".format(*inputs))
    #       cog.outl("    ccache -z")
    #       cog.outl("    cmake -DBUILD_PLATFORM=${{{{ matrix.build_platform }}}} -DOPT_LEVEL={} -DSANITIZERS={} -DLTO={} ../".format(*inputs))
    #       cog.outl("    make -j$(nproc) make_demos")
    #       cog.outl("    ccache -s")
    #       cog.outl()
    # ]]]
    - name: Build_O0_SANITIZERS_OFF_LTO_OFF
      run: |
        mkdir build_O0_SANITIZERS_OFF_LTO_OFF
        cd build_O0_SANITIZERS_OFF_LTO_OFF
        ccache -z
        cmake -DBUILD_PLATFORM=${{ matrix.build_platform }} -DOPT_LEVEL=0 -DSANITIZERS=OFF -DLTO=OFF ../
        make -j$(nproc) make_demos
        ccache -s

    - name: Build_O0_SANITIZERS_ON_LTO_OFF
      run: |
        mkdir build_O0_SANITIZERS_ON_LTO_OFF
        cd build_O0_SANITIZERS_ON_LTO_OFF
        ccache -z
        cmake -DBUILD_PLATFORM=${{ matrix.build_platform }} -DOPT_LEVEL=0 -DSANITIZERS=ON -DLTO=OFF ../
        make -j$(nproc) make_demos
        ccache -s

    - name: Build_Os_SANITIZERS_OFF_LTO_OFF
      run: |
        mkdir build_Os_SANITIZERS_OFF_LTO_OFF
        cd build_Os_SANITIZERS_OFF_LTO_OFF
        ccache -z
        cmake -DBUILD_PLATFORM=${{ matrix.build_platform }} -DOPT_LEVEL=s -DSANITIZERS=OFF -DLTO=OFF ../
        make -j$(nproc) make_demos
        ccache -s

    - name: Build_Os_SANITIZERS_OFF_LTO_ON
      run: |
        mkdir build_Os_SANITIZERS_OFF_LTO_ON
        cd build_Os_SANITIZERS_OFF_LTO_ON
        ccache -z
        cmake -DBUILD_PLATFORM=${{ matrix.build_platform }} -DOPT_LEVEL=s -DSANITIZERS=OFF -DLTO=ON ../
        make -j$(nproc) make_demos
        ccache -s

    - name: Build_Os_SANITIZERS_ON_LTO_OFF
      run: |
        mkdir build_Os_SANITIZERS_ON_LTO_OFF
        cd build_Os_SANITIZERS_ON_LTO_OFF
        ccache -z
        cmake -DBUILD_PLATFORM=${{ matrix.build_platform }} -DOPT_LEVEL=s -DSANITIZERS=ON -DLTO=OFF ../
        make -j$(nproc) make_demos
        ccache -s

    - name: Build_Os_SANITIZERS_ON_LTO_ON
      run: |
        mkdir build_Os_SANITIZERS_ON_LTO_ON
        cd build_Os_SANITIZERS_ON_LTO_ON
        ccache -z
        cmake -DBUILD_PLATFORM=${{ matrix.build_platform }} -DOPT_LEVEL=s -DSANITIZERS=ON -DLTO=ON ../
        make -j$(nproc) make_demos
        ccache -s

    - name: Build_O3_SANITIZERS_OFF_LTO_OFF
      run: |
        mkdir build_O3_SANITIZERS_OFF_LTO_OFF
        cd build_O3_SANITIZERS_OFF_LTO_OFF
        ccache -z
        cmake -DBUILD_PLATFORM=${{ matrix.build_platform }} -DOPT_LEVEL=3 -DSANITIZERS=OFF -DLTO=OFF ../
        make -j$(nproc) make_demos
        ccache -s

    - name: Build_O3_SANITIZERS_OFF_LTO_ON
      run: |
        mkdir build_O3_SANITIZERS_OFF_LTO_ON
        cd build_O3_SANITIZERS_OFF_LTO_ON
        ccache -z
        cmake -DBUILD_PLATFORM=${{ matrix.build_platform }} -DOPT_LEVEL=3 -DSANITIZERS=OFF -DLTO=ON ../
        make -j$(nproc) make_demos
        ccache -s

    - name: Build_O3_SANITIZERS_ON_LTO_OFF
      run: |
        mkdir build_O3_SANITIZERS_ON_LTO_OFF
        cd build_O3_SANITIZERS_ON_LTO_OFF
        ccache -z
        cmake -DBUILD_PLATFORM=${{ matrix.build_platform }} -DOPT_LEVEL=3 -DSANITIZERS=ON -DLTO=OFF ../
        make -j$(nproc) make_demos
        ccache -s

    - name: Build_O3_SANITIZERS_ON_LTO_ON
      run: |
        mkdir build_O3_SANITIZERS_ON_LTO_ON
        cd build_O3_SANITIZERS_ON_LTO_ON
        ccache -z
        cmake -DBUILD_PLATFORM=${{ matrix.build_platform }} -DOPT_LEVEL=3 -DSANITIZERS=ON -DLTO=ON ../
        make -j$(nproc) make_demos
        ccache -s

    # [[[end]]]

    - name: Test
      env:
        OPT_LEVELS: 0 s 3
        SANITIZERS: OFF ON
        LTO: OFF ON
      run: |
        source testenv/bin/activate
        for opt_level in $OPT_LEVELS; do
          for sanitizers in $SANITIZERS; do
            for lto in $LTO; do
              cd build_O${opt_level}_SANITIZERS_${sanitizers}_LTO_${lto}
              # TODO: With multiple threads we sometimes get an error reading progress file
              lit ../demos/ --xunit-xml-output results.xml -a -j1
              cd ..
            done
          done
        done

    - name: Publish Test Report
      uses: mikepenz/action-junit-report@v1
      with:
        report_paths: '**/results.xml'
        github_token: ${{ secrets.GITHUB_TOKEN }}
        check_name: ${{ matrix.build_platform }}
