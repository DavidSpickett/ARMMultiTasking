# Note: indentation is VERY important!

parameters:
  build_platform: []
  opt_level: []
  sanitizers: []
  lto: []
  compiler: "gcc"

jobs:
- ${{ each build_platform in parameters.build_platform }}:
  - job: ${{build_platform}}
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
      - checkout: self
        path: 'ARMMultiTasking'

      - script: |
          sudo apt-get update
          sudo apt-get install -y python3-pip ccache
        displayName: apt-get-py3pip-ccache

      - ${{ if in(build_platform, 'ARM', 'THUMB', 'AARCH64') }}:
        - script: |
            sudo apt-get install -y qemu-system-arm
          displayName: apt-get-qemu

      - ${{ if in(build_platform, 'ARM', 'THUMB') }}:
        - script: sudo apt-get install -y gcc-arm-none-eabi libnewlib-arm-none-eabi
          displayName: apt-get-toolchain

      - ${{ if eq(parameters.compiler, 'clang') }}:
        - script: |
            sudo apt-get install -y clang-9
            # Make 'clang' be clang-9
            sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-9 100
          displayName: apt-get-clang-9

      - ${{ if eq(build_platform, 'AARCH64') }}:
        - template: get-linaro-toolchain.yml
          parameters:
            toolchain_url: 7.4-2019.02/aarch64-elf/gcc-linaro-7.4.1-2019.02-x86_64_aarch64-elf.tar.xz

      - script: |
          # Required for distlib, used by virtualenv
          pip3 install setuptools wheel
          # Running it in a venv is the best way to be able to just run 'lit', not some random path or "python -c" invocation.
          pip3 install virtualenv
          python3 -m virtualenv testenv
          source testenv/bin/activate
          pip3 install lit
        workingDirectory: $(Agent.BuildDirectory)
        displayName: install-lit

      - script: |
          # pipefail so the OCLint tee can propogate return code
          set -ex -o pipefail
          mkdir oclint
          wget -qO- https://github.com/oclint/oclint/releases/download/v0.13.1/oclint-0.13.1-x86_64-linux-4.4.0-112-generic.tar.gz | tar xzf - -C oclint --strip-components=1
          export PATH=$(pwd)/toolchain/bin/:$(pwd)/oclint/bin/:$PATH
          cd ARMMultiTasking
          # If we enable UBSAN we get weird LTO warnings at O0 for Arm
          # Disabling those warnings uses a flag that Clang/OCLint doesn't understand
          cmake . -DBUILD_PLATFORM=${{build_platform}} -DOPT_LEVEL=0 -DSANITIZERS=OFF -DCOMPILER=${{parameters.compiler}}
          tmpfile=$(mktemp)
          # Violations will fail with non zero exit code
          oclint -enable-clang-static-analyzer `find -not \( -path ./CMakeFiles -prune \) -not \( -name elf.c \) -not \( -name print.c \) -not \( -path ./demos/shell -prune \) -regex ".*\.c"` -max-priority-1 0 -max-priority-2 0 -max-priority-3 0 | tee $tmpfile
          # Static analyser results don't affect return code so do it ourselves
          ! awk '/Clang Static Analyzer Results:/{flag=1; next} /OCLint Report/{flag=0}flag' $tmpfile | grep -qve "^$"
        workingDirectory: $(Agent.BuildDirectory)
        displayName: oclint
        continueOnError: true

      - ${{ each opt_level in parameters.opt_level }}:
        - ${{ each lto in parameters.lto }}:
          - ${{ each sanitizers in parameters.sanitizers }}:
            - script: |
                set -ex
                # Each script has its own environment so we need to do this here
                export PATH=$(pwd)/toolchain/bin/:$PATH
                cd ARMMultiTasking
                rm CMakeCache.txt
                export CCACHE_DIR=$(pwd)/.ccache
                ccache -z
                cmake . -DBUILD_PLATFORM=${{build_platform}} -DOPT_LEVEL=${{opt_level}} -DSANITIZERS=${{sanitizers}} -DLTO=${{lto}} -DCOMPILER=${{parameters.compiler}}
                make clean
                make -j2 make_demos
                ccache -s
              workingDirectory: $(Agent.BuildDirectory)
              displayName: build-O${{opt_level}}_SANITIZERS_${{sanitizers}}_LTO_${{lto}}

            - script: |
                source testenv/bin/activate
                # Need the toolchain to build loadable programs
                export PATH=$(pwd)/toolchain/bin/:$PATH
                cd ARMMultiTasking
                # Don't be fooled, this is actually JUnit format
                lit demos --xunit-xml-output ${{build_platform}}_O${{opt_level}}_SANITIZERS_${{sanitizers}}_LTO_${{lto}}_results.xml -a
              workingDirectory: $(Agent.BuildDirectory)
              displayName: test-O${{opt_level}}_SANITIZERS_${{sanitizers}}_LTO_${{lto}}
              # So we'll get a failed build when tests fail
              continueOnError: true

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '*_results.xml'
