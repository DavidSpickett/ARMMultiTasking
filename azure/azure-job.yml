# Note: indentation is VERY important!

parameters:
  build_platform: []
  opt_level: []
  sanitizers: []
  lto: []

jobs:
- ${{ each build_platform in parameters.build_platform }}:
  - job: ${{build_platform}}
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
      - checkout: self
        path: 'ARMMultiTasking'

      - script: |
          sudo apt-get update
          sudo apt-get install -y python3-pip ccache expect qemu-system-arm
        displayName: apt-installs

      - ${{ if in(build_platform, 'ARM', 'THUMB') }}:
        - script: sudo apt-get install -y gcc-arm-none-eabi libnewlib-arm-none-eabi
          displayName: apt-get-toolchain

      - ${{ if eq(build_platform, 'AARCH64') }}:
        - template: get-linaro-toolchain.yml
          parameters:
            toolchain_url: 7.4-2019.02/aarch64-elf/gcc-linaro-7.4.1-2019.02-x86_64_aarch64-elf.tar.xz

      - script: |
          # Required for distlib, used by virtualenv
          pip3 install setuptools wheel
          # Running lit from a venv is the best way to be able to just run 'lit', not some random path or "python -c" invocation.
          pip3 install virtualenv
          python3 -m virtualenv testenv
          source testenv/bin/activate
          pip3 install lit
        workingDirectory: $(Agent.BuildDirectory)
        displayName: install-lit

      - ${{ each opt_level in parameters.opt_level }}:
        - ${{ each lto in parameters.lto }}:
          - ${{ each sanitizers in parameters.sanitizers }}:
            # Skip O0 LTO, it's the same as O0
            - ${{ if not(and(eq(opt_level, '0'), eq(lto, 'ON'))) }}:
              - script: |
                  set -ex
                  # Each script has its own environment so we need to do this here
                  export PATH=$(pwd)/toolchain/bin/:$PATH
                  export CCACHE_DIR=$(pwd)/.ccache

                  mkdir build_${{opt_level}}_${{sanitizers}}_${{lto}}
                  cd build_${{opt_level}}_${{sanitizers}}_${{lto}}
                  ccache -z
                  cmake -DBUILD_PLATFORM=${{build_platform}} -DOPT_LEVEL=${{opt_level}} -DSANITIZERS=${{sanitizers}} -DLTO=${{lto}} ../ARMMultiTasking/
                  make -j$(nproc) make_demos
                  ccache -s
                workingDirectory: $(Agent.BuildDirectory)
                displayName: build-O${{opt_level}}_SANITIZERS_${{sanitizers}}_LTO_${{lto}}

      - ${{ each opt_level in parameters.opt_level }}:
        - ${{ each lto in parameters.lto }}:
          - ${{ each sanitizers in parameters.sanitizers }}:
            # Skip O0 LTO, it's the same as O0
            - ${{ if not(and(eq(opt_level, '0'), eq(lto, 'ON'))) }}:
              - script: |
                  # Some loadables get built in tests
                  export PATH=$(pwd)/toolchain/bin/:$PATH
                  export CCACHE_DIR=$(pwd)/.ccache

                  source testenv/bin/activate
                  cd build_${{opt_level}}_${{sanitizers}}_${{lto}}
                  # Don't be fooled, this is actually JUnit format
                  lit ../ARMMultiTasking/demos/ --xunit-xml-output results.xml -a
                workingDirectory: $(Agent.BuildDirectory)
                displayName: test-O${{opt_level}}_SANITIZERS_${{sanitizers}}_LTO_${{lto}}
                # So we'll get a failed build when tests fail
                continueOnError: true

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/results.xml'
          searchFolder: $(Agent.BuildDirectory)
